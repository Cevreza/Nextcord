# credit to https://github.com/disnakeDev/disnake/blob/master/pyproject.toml for config
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]


[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true


[tool.taskipy.tasks]
black = { cmd = "task lint black", help = "Run black" }
docs = { cmd = "cd docs && sphinx-autobuild . _build/html --ignore _build --watch ../nextcord --port 8069", help = "Build the documentation on an autoreloading server." }
isort = { cmd = "task lint isort", help = "Run isort" }
lint = { cmd = "pre-commit run --all-files", help = "Check all files for linting errors" }
precommit = { cmd = "pre-commit install --install-hooks", help = "Install the precommit hook" }
pyright = { cmd = "dotenv -f task.env run -- python -m pyright", help = "Run pyright" }
slotscheck = { cmd = "python -m slotscheck --verbose -m nextcord", help = "Run slotscheck" }
autotyping = { cmd = "task lint autotyping", help = "Refactor code to add automatic type annotations" }


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^nextcord\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "basic"
include = [ # TODO: add examples back once app cmd is fixed
    "nextcord",
    "docs",
    "*.py",
]
pythonVersion = "3.8"

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportInvalidStringEscapeSequence = false
reportPropertyTypeMismatch = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportUnknownLambdaType = true
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedVariable = true
reportUnnecessaryComparison = true
reportUnnecessaryTypeIgnoreComment = true

[tool.poetry]
name = "nextcord"
version = "2.5.0a"
homepage = "https://github.com/nextcord/nextcord"
documentation = "https://docs.nextcord.dev/"
description = "A Python wrapper for the Discord API forked from discord.py"
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
    "Framework :: aiohttp",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
] # License and Version are added automatically by Poetry
packages = [
    { include = "nextcord" },
    { include = "nextcord/types" },
    { include = "nextcord/ui" },
    { include = "nextcord/webhook" },
    { include = "nextcord/ext/application_checks" },
    { include = "nextcord/ext/commands" },
    { include = "nextcord/ext/tasks" },
    { include = "nextcord/ui/select" },

    # Compatibility
    { include = "discord" },
    { include = "discord/types" },
    { include = "discord/ui" },
    { include = "discord/webhook" },
    { include = "discord/ext/commands" },
    { include = "discord/ext/tasks" },
]
[tool.poetry.dependencies]
python = "^3.8"
aiohttp = { version = "^3.8.0", extras = ["speedups"] }
typing_extensions = "^4.2.0"

PyNaCl = { version = ">=1.3.0,<1.5", optional = true }
orjson = { version = ">=3.5.4", optional = true }

[tool.poetry.group.dev.dependencies]
pre-commit = "2.18.1"
taskipy = "1.10.3"
pyright = "1.1.290"

[tool.poetry.group.docs.dependencies]
sphinx = "5.0.1"
sphinxcontrib-trio = "1.1.2"
sphinxcontrib-websupport = "^1.2.4"
typing-extensions = ">=4.2.0,<5"

[tool.poetry.urls]
"Documentation" = "https://docs.nextcord.dev/"
"Issue tracker" = "https://github.com/nextcord/nextcord/issues"

[tool.poetry.extras]
voice = ["PyNaCl"]
speed = ["orjson"]
docs = [
    "sphinx",
    "sphinxcontrib_trio",
    "sphinxcontrib-websupport",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
